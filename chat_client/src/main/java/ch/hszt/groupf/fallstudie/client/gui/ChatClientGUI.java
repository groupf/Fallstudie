/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ChatClientGUI.java
 *
 * Created on 27.10.2011, 11:58:27
 */
package ch.hszt.groupf.fallstudie.client.gui;

import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.InetAddress;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import ch.hszt.groupf.fallstudie.client.controller.ClientController;
import ch.hszt.groupf.fallstudie.client.controller.IfcUserInterface;
import ch.hszt.groupf.fallstudie.client.log.LogFactory;

/**
 * Most of this class ChatClientGUI ist produced with NetBeans 7.0.1 So it makes
 * no sence to make some JUnit or JMock test for testing this class. Testing a
 * GUI ist just 'impossible'. Just Chuck Norris can do this well ;-)
 * 
 * This class implements a GUI Interface, which uses the factory of
 * IfcUserInterace, the same as the ChatClientCLI.
 * 
 * @author: groupf
 */
@SuppressWarnings("serial")
public class ChatClientGUI extends javax.swing.JFrame implements IfcUserInterface {

	private final ClientController _controller;

	// javax.swing.JLabel _jLblConnStatus = new javax.swing.JLabel();

	/** Creates new form ChatClientGUI */
	public ChatClientGUI(ClientController inClientController) {
		_controller = inClientController;
		// test
		_jLblConnStatus = new javax.swing.JLabel();
		init();
		initComponents();
		setVisible(true);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LogButtonGroup = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        _jTxtAReceived = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        _jTxtAInput = new javax.swing.JTextArea();
        _jBtnSend = new javax.swing.JButton();
        _jLblConnLbl = new javax.swing.JLabel();
        _jLblConnStatus = new javax.swing.JLabel();
        _jMenuBar = new javax.swing.JMenuBar();
        _jMenuConn = new javax.swing.JMenu();
        _jMenuItemOpConn = new javax.swing.JMenuItem();
        _jMenuItemClCon = new javax.swing.JMenuItem();
        jMenuLog = new javax.swing.JMenu();
        jRadioButtonMenuLogIsOn = new javax.swing.JCheckBoxMenuItem();
        jRadioButtonMenuLogIsOff = new javax.swing.JCheckBoxMenuItem();
        _jMenuHelp = new javax.swing.JMenu();
        _jMenuItemHlpCmd = new javax.swing.JMenuItem();
        _jMenuItemHlpAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IRCv2 Chat Client");

        jScrollPane1.setAutoscrolls(true);

        _jTxtAReceived.setColumns(20);
        _jTxtAReceived.setEditable(false);
        _jTxtAReceived.setLineWrap(true);
        _jTxtAReceived.setRows(5);
        jScrollPane1.setViewportView(_jTxtAReceived);

        jScrollPane2.setAutoscrolls(true);

        _jTxtAInput.setColumns(20);
        _jTxtAInput.setLineWrap(true);
        _jTxtAInput.setRows(5);
        _jTxtAInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                onKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                onKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(_jTxtAInput);

        _jBtnSend.setText("Send");
        _jBtnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSendActionPerformed(evt);
            }
        });

        _jLblConnLbl.setText("Connection Status:");

        _jLblConnStatus.setText("Not connected");

        _jMenuConn.setText("Connection");

        _jMenuItemOpConn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        _jMenuItemOpConn.setText("Open Connection");
        _jMenuItemOpConn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onOpenConnection(evt);
            }
        });
        _jMenuConn.add(_jMenuItemOpConn);

        _jMenuItemClCon.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        _jMenuItemClCon.setText("Close Connection");
        _jMenuItemClCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCloseConnection(evt);
            }
        });
        _jMenuConn.add(_jMenuItemClCon);

        _jMenuBar.add(_jMenuConn);

        jMenuLog.setText("Options");

        jRadioButtonMenuLogIsOn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        LogButtonGroup.add(jRadioButtonMenuLogIsOn);
        jRadioButtonMenuLogIsOn.setText("Log on");
        jRadioButtonMenuLogIsOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
             

            //	jRadioButtonMenuLogIsOnActionPerformed(evt);
            
            
            
            
            }
        });
        jMenuLog.add(jRadioButtonMenuLogIsOn);

        jRadioButtonMenuLogIsOff.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        LogButtonGroup.add(jRadioButtonMenuLogIsOff);
        jRadioButtonMenuLogIsOff.setSelected(true);
        jRadioButtonMenuLogIsOff.setText("Log off");
        jMenuLog.add(jRadioButtonMenuLogIsOff);

        _jMenuBar.add(jMenuLog);

        _jMenuHelp.setText("Help");

        _jMenuItemHlpCmd.setText("Commands");
        _jMenuHelp.add(_jMenuItemHlpCmd);

        _jMenuItemHlpAbout.setText("About");
        _jMenuHelp.add(_jMenuItemHlpAbout);

        _jMenuBar.add(_jMenuHelp);

        setJMenuBar(_jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(_jLblConnLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(_jLblConnStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 360, Short.MAX_VALUE)
                        .addComponent(_jBtnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(_jLblConnLbl)
                        .addComponent(_jLblConnStatus))
                    .addComponent(_jBtnSend))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//    private void jRadioButtonMenuLogIsOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuLogIsOnActionPerformed
//        // TODO add your handling code here:
//    }//GEN-LAST:event_jRadioButtonMenuLogIsOnActionPerformed

	private void onKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_onKeyReleased
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			if (evt.isControlDown()) {
				String enter = System.getProperty("line.separator");
				_jTxtAInput.append(enter);
			} else {
				sendMsg();

			}
		}
	}// GEN-LAST:event_onKeyReleased

	private void onKeyPressed(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_onKeyPressed

		// System.out.println("LÃ¤nge des Felder: " +
		// _jTxtAInput.getText().length());
	}// GEN-LAST:event_onKeyPressed

	/**
	 * This method just call the send Methode. It will not do anything else.
	 * 
	 * @param evt
	 */
	private void onSendActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_onSendActionPerformed
		sendMsg();
	}// GEN-LAST:event_onSendActionPerformed

	/**
	 * The GUI will not send the message. It just call the sending Method of the
	 * Controller and write the sended message into the message field.
	 * 
	 * Before sending the message text, look if a Enter is at the end of the
	 * text. If yes, remove it.
	 */
	private void sendMsg() {
		String enter = System.getProperty("line.separator");

		String sendText = _jTxtAInput.getText();

		sendText.replace(".*" + enter + "$", "");

		// System.out.println(sendText +"\nafasdfasdfsdf");
		_controller.send(sendText);
		_jTxtAInput.setText("");

	}

	/**
	 * This method is method which will be called from the connection menu. It
	 * tries to connect the client to the server.
	 * 
	 * @param evt
	 */
	private void onOpenConnection(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_onOpenConnection
		ChatClientConnGUI clientConnGUI = new ChatClientConnGUI(this, true);
		clientConnGUI.setVisible(true);
		String username = clientConnGUI.getUserName();
		InetAddress serverAddress = clientConnGUI.getServerAddress();
		int serverPort = clientConnGUI.getServerPort();
		if (serverAddress != null && username != null && (serverPort > 0 && serverPort <= 65535)) {
			_controller.connect(serverAddress, serverPort, username);

			/**
			 * This sleeping for the Thread is using because otherwhise the
			 * method displayConnStatus() checks if the connection is
			 * established. It could take a while for connecting to the server.
			 * So we need some time to set the connection to "true". If not, the
			 * message in the bottom of the GUI will not change to "connected"
			 */
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			displayConnStatus();
		}
	}// GEN-LAST:event_onOpenConnection

	/**
	 * This method will disconnect the client from the server. It will close the
	 * log and set the status to not connected.
	 * 
	 * @param evt
	 */
	private void onCloseConnection(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_onCloseConnection
		// TODO wie soll sich der client beim server abmelden?

		if (_controller.isConnected()) {

			if (_controller.isLogOn()) {
				_controller.getLogger().writeLog("The client will no disconnect from the server.");
				_controller.getLogger().writeLog("The client has been disconnected manually from the client");
				_controller.turnLogOff();
			}
			onDisconnected(new Exception("Disconnected manually from the client"));

		}

		else {
			String s = "You cannot close the connection if you haven't opened it...";
			JOptionPane.showMessageDialog(new JFrame(), s);
			_jTxtAReceived.append(s);

		}

	}// GEN-LAST:event_onCloseConnection

	/**
	 * This is the initalisation method for the GUI. It is created by NetBeans
	 * and not veryfied.
	 * 
	 * @param args
	 *            the command line arguments
	 */
	public static void init() {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(ChatClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(ChatClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(ChatClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(ChatClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup LogButtonGroup;
    private javax.swing.JButton _jBtnSend;
    private javax.swing.JLabel _jLblConnLbl;
    private javax.swing.JLabel _jLblConnStatus;
    private javax.swing.JMenuBar _jMenuBar;
    private javax.swing.JMenu _jMenuConn;
    private javax.swing.JMenu _jMenuHelp;
    private javax.swing.JMenuItem _jMenuItemClCon;
    private javax.swing.JMenuItem _jMenuItemHlpAbout;
    private javax.swing.JMenuItem _jMenuItemHlpCmd;
    private javax.swing.JMenuItem _jMenuItemOpConn;
    private javax.swing.JTextArea _jTxtAInput;
    private javax.swing.JTextArea _jTxtAReceived;
    private javax.swing.JMenu jMenuLog;
    private javax.swing.JCheckBoxMenuItem jRadioButtonMenuLogIsOff;
    private javax.swing.JCheckBoxMenuItem jRadioButtonMenuLogIsOn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

	/**
	 * This is the initalisation Menu for the Menu in the GUI. It contains the
	 * log function, the help function, the connecting and disconnecting...
	 * 
	 * It is created by NetBeans and not veryfied.
	 */
	 private void initLogMenu() {
	
	 jRadioButtonMenuLogIsOff.setSelected(true);
	 jRadioButtonMenuLogIsOff.setText("Log is off");
	 jMenuLog.add(jRadioButtonMenuLogIsOff);
	
	 jRadioButtonMenuLogIsOn.setSelected(false);
	 jRadioButtonMenuLogIsOn.setText("Log is on");
	 jMenuLog.add(jRadioButtonMenuLogIsOn);
	
	 /**
	 * Action Listener for set Log on. If this is the first time you turn
	 * log on you have to choose a text file where to write the log in
	 */
	 jRadioButtonMenuLogIsOn.addActionListener((new
	 java.awt.event.ActionListener() {
	 public void actionPerformed(java.awt.event.ActionEvent evt) {
	// jLabelLog.setText("Log is on");
	
	 if (_controller.getLogger() == null) {
	
	 try {
	 File file = chooseLogTextFile();
	 _controller.setLogger(file);
	 } catch (IOException e) {
	 JFrame frame = new JFrame();
	 JOptionPane.showMessageDialog(frame,
	 "Sorry, I could not turn on the log." + e);
	 }
	
	 _controller.turnLogOn();
	 _controller.getLogger().writeFirstLogAfterTurnedOn();
	 } else
	 _controller.turnLogOn();
	 /**
	 * The sysout is just for testing
	 */
	 System.out.println("Das Log wurde erfolgreich eingeschaltet.");
	 }
	 }));
	
	 /**
	 * Action Listener for set Log off. And it writes to the GUI that the
	 * log is now set off.
	 */
	 jRadioButtonMenuLogIsOff.addActionListener((new
	 java.awt.event.ActionListener() {
	 public void actionPerformed(java.awt.event.ActionEvent evt) {
//	 jLabelLog.setText("Log is off");
	 _controller.turnLogOff();
	
	 /**
	 * The sysout is just for testing
	 */
	 System.out.println("Das Log wurde erfolgreich ausgeschaltet");
	 }
	 }));
	
	 /**
	 * This method will open a FileChooser. So you have to choose an
	 * existing text file, which is your Log File This method will be called
	 * directely from the user or if the log is turned on the first time and
	 * no Logfile is set.
	 */
	
	 
	 jMenuItemSelectFile.setText("Select Log File");
	 jMenuItemSelectFile.addActionListener(new java.awt.event.ActionListener()
	 {
	 public void actionPerformed(java.awt.event.ActionEvent evt) {
	 try {
	 chooseLogTextFile();
	 } catch (IOException e) {
	 // TODO Auto-generated catch block
	 e.printStackTrace();
	 }
	
	 }
	 });
	
	 }

	/**
	 * With this methode the user choose a text file which is the Log file. It
	 * has to be a .txt file
	 * 
	 * @return
	 * @throws IOException
	 *             Thrown, if the file don't exist or can not be readed/writed.
	 */
	private File chooseLogTextFile() throws IOException {
		BufferedWriter _bufferedWriter;
		FileWriter _fstream;
		File _myFile = null;
		JFileChooser _fileChooser = new JFileChooser();

		int retval = _fileChooser.showOpenDialog(_fileChooser);
		if (retval == JFileChooser.APPROVE_OPTION) {

			// _myFile = file;

			_myFile = _fileChooser.getSelectedFile();
			_fstream = new FileWriter(_myFile);
			_bufferedWriter = new BufferedWriter(_fstream);
		}
		return _myFile;

		// }

	}

	/**
	 * This method handels what the GUI should to when a message is received. It
	 * simply write the received message into the Text field.
	 */
	public void onReceivedMsg(String inMessage) {
		_jTxtAReceived.append(inMessage + System.getProperty("line.separator"));
		_jTxtAReceived.setCaretPosition(_jTxtAReceived.getDocument().getLength());

	}

	/**
	 * This method describes what the GUI should do on a disconnection. This can
	 * be with disconnecting manually through the gui menu, a network failure
	 * or, if the server brokes down.
	 */
	public void onDisconnected(Exception inEx) {
		// TODO Auto-generated method stub
		String s = "The client has been disconnected from the server.\r\nYou can not write any more messages. They will not reach the receiver. I'm sorry.\r\nError Message: "
				+ inEx + "\r\n";
		JOptionPane.showMessageDialog(new JFrame(), s);
		_jTxtAReceived.append(s);

		// TODO method for disconnecting from the server is missing.
		displayConnStatus();
	}

	/**
	 * Will write the connecting status of the client in the bottom of the GUI.
	 */
	public void displayConnStatus() {

		if (_controller.isConnected()) {
			_jLblConnStatus.setText("Client is connected");

		} else {
			_jLblConnStatus.setText("Not connected");

		}
	}

	/**
	 * This method is just used for JUnit Tests
	 */
	public void setLoggeronController(File file) throws IOException, NullPointerException {
		_controller.setLogger(file);

	}

	@Override
	public String getChatClientString() {
		return "GUI";
	}

	@Override
	public LogFactory getLoggeronController() {
		return _controller.getLogger();
	}

}
